{"version":3,"sources":["../../src/schema/resolvers.ts"],"names":["findMany","typeName","findManyResolver","_source","args","context","info","stats","totalRunQuery","totalPluralRunQuery","nodeModel","runQuery","query","firstOnly","type","schema","getType","tracer","path","connectionType","findOne","findOneResolver","filter","findManyPaginated","findManyPaginatedResolver","source","group","getProjectedField","distinct","extendedArgs","result","paginate","skip","limit","distinctResolver","field","edges","values","Set","forEach","node","value","undefined","Array","isArray","subValue","add","Date","toISOString","from","sort","groupResolver","groupedResults","reduce","acc","key","concat","Object","create","keys","fieldValue","push","results","count","length","items","slice","pageCount","Math","ceil","currentPage","hasPreviousPage","hasNextPage","NaN","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","then","linkResolverValue","returnType","getNodesByIds","ids","getNodeById","id","runQueryArgs","split","reduceRight","obj","in","eq","GraphQLList","resultOrPromise","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","getFields","fieldArg","arg","name","fieldEnum","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","createResolverActivity","parentType","start","endActivity","end","defaultResolver"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAgBA;;AACA;;AACA;;AAaO,SAASA,QAAT,CACLC,QADK,EAE2B;AAChC,SAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkDC,IAAlD,EAA6D;AAClE,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjBF,MAAAA,OAAO,CAACE,KAAR,CAAcC,aAAd;AACAH,MAAAA,OAAO,CAACE,KAAR,CAAcE,mBAAd;AACD;;AAED,WAAOJ,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CACL;AACEC,MAAAA,KAAK,EAAER,IADT;AAEES,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,IAAI,EAAER,IAAI,CAACS,MAAL,CAAYC,OAAZ,CAAoBf,QAApB,CAHR;AAIEM,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAJjB;AAKEU,MAAAA,MAAM,EAAEZ,OAAO,CAACY;AALlB,KADK,EAQL;AAAEC,MAAAA,IAAI,EAAEb,OAAO,CAACa,IAAhB;AAAsBC,MAAAA,cAAc,EAAElB;AAAtC,KARK,CAAP;AAUD,GAhBD;AAiBD;;AAEM,SAASmB,OAAT,CACLnB,QADK,EAE2B;AAChC,SAAO,SAASoB,eAAT,CAAyBlB,OAAzB,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,IAAjD,EAA4D;AACjE,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjBF,MAAAA,OAAO,CAACE,KAAR,CAAcC,aAAd;AACD;;AACD,WAAOH,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CACL;AACEC,MAAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAElB;AAAV,OADT;AAEES,MAAAA,SAAS,EAAE,IAFb;AAGEC,MAAAA,IAAI,EAAER,IAAI,CAACS,MAAL,CAAYC,OAAZ,CAAoBf,QAApB,CAHR;AAIEM,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAJjB;AAKEU,MAAAA,MAAM,EAAEZ,OAAO,CAACY;AALlB,KADK,EAQL;AAAEC,MAAAA,IAAI,EAAEb,OAAO,CAACa;AAAhB,KARK,CAAP;AAUD,GAdD;AAeD;;AAIM,SAASK,iBAAT,CACLtB,QADK,EAE0C;AAC/C,SAAO,eAAeuB,yBAAf,CACLC,MADK,EAELrB,IAFK,EAGLC,OAHK,EAILC,IAJK,EAKkC;AACvC;AACA;AACA,UAAMoB,KAAK,GAAGC,iBAAiB,CAACrB,IAAD,EAAQ,OAAR,CAA/B;AACA,UAAMsB,QAAQ,GAAGD,iBAAiB,CAACrB,IAAD,EAAQ,UAAR,CAAlC;AACA,UAAMuB,YAAY,GAAG,EACnB,GAAGzB,IADgB;AAEnBsB,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFG;AAGnBE,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAHH,KAArB;AAMA,UAAME,MAAM,GAAG,MAAM9B,QAAQ,CAAgCC,QAAhC,CAAR,CACnBwB,MADmB,EAEnBI,YAFmB,EAGnBxB,OAHmB,EAInBC,IAJmB,CAArB;AAMA,WAAOyB,QAAQ,CAACD,MAAD,EAAS;AAAEE,MAAAA,IAAI,EAAE5B,IAAI,CAAC4B,IAAb;AAAmBC,MAAAA,KAAK,EAAE7B,IAAI,CAAC6B;AAA/B,KAAT,CAAf;AACD,GAvBD;AAwBD;;AAMM,MAAML,QAGZ,GAAG,SAASM,gBAAT,CAA0BT,MAA1B,EAAkCrB,IAAlC,EAAuD;AACzD,QAAM;AAAE+B,IAAAA;AAAF,MAAY/B,IAAlB;AACA,QAAM;AAAEgC,IAAAA;AAAF,MAAYX,MAAlB;AAEA,QAAMY,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAC1B,UAAMC,KAAK,GACT,4BAAWD,IAAX,EAAkB,qBAAoBL,KAAM,EAA5C,KAAkD,4BAAWK,IAAX,EAAiBL,KAAjB,CADpD;;AAEA,QAAIM,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACzC;AACD;;AACD,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,CAACF,OAAN,CAAcM,QAAQ,IACpBR,MAAM,CAACS,GAAP,CAAWD,QAAQ,YAAYE,IAApB,GAA2BF,QAAQ,CAACG,WAAT,EAA3B,GAAoDH,QAA/D,CADF;AAGD,KAJD,MAIO,IAAIJ,KAAK,YAAYM,IAArB,EAA2B;AAChCV,MAAAA,MAAM,CAACS,GAAP,CAAWL,KAAK,CAACO,WAAN,EAAX;AACD,KAFM,MAEA;AACLX,MAAAA,MAAM,CAACS,GAAP,CAAWL,KAAX;AACD;AACF,GAfD;AAgBA,SAAOE,KAAK,CAACM,IAAN,CAAWZ,MAAX,EAAmBa,IAAnB,EAAP;AACD,CAzBM;;;;AAkCA,MAAMxB,KAGZ,GAAG,SAASyB,aAAT,CAAuB1B,MAAvB,EAA+BrB,IAA/B,EAAmE;AACrE,QAAM;AAAE+B,IAAAA;AAAF,MAAY/B,IAAlB;AACA,QAAM;AAAEgC,IAAAA;AAAF,MAAYX,MAAlB;AACA,QAAM2B,cAA6C,GAAGhB,KAAK,CAACiB,MAAN,CACpD,CAACC,GAAD,EAAM;AAAEd,IAAAA;AAAF,GAAN,KAAmB;AACjB,UAAMC,KAAK,GACT,4BAAWD,IAAX,EAAkB,qBAAoBL,KAAM,EAA5C,KACA,4BAAWK,IAAX,EAAiBL,KAAjB,CAFF;AAGA,UAAME,MAAM,GAAGM,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA9C;AACAJ,IAAAA,MAAM,CACHf,MADH,CACUmB,KAAK,IAAIA,KAAK,IAAI,IAD5B,EAEGF,OAFH,CAEWE,KAAK,IAAI;AAChB,YAAMc,GAAG,GAAGd,KAAK,YAAYM,IAAjB,GAAwBN,KAAK,CAACO,WAAN,EAAxB,GAA8CP,KAA1D;AACAa,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAW,CAACD,GAAG,CAACC,GAAD,CAAH,IAAY,EAAb,EAAiBC,MAAjB,CAAwBhB,IAAxB,CAAX;AACD,KALH;AAMA,WAAOc,GAAP,CAXiB,CAYjB;AACA;AACA;AACD,GAhBmD,EAiBpDG,MAAM,CAACC,MAAP,CAAc,IAAd,CAjBoD,CAAtD;AAoBA,SAAOD,MAAM,CAACE,IAAP,CAAYP,cAAZ,EACJF,IADI,GAEJG,MAFI,CAEG,CAACC,GAAD,EAAoCM,UAApC,KAA2D;AACjEN,IAAAA,GAAG,CAACO,IAAJ,CAAS,EACP,GAAG9B,QAAQ,CAACqB,cAAc,CAACQ,UAAD,CAAf,EAA6BxD,IAA7B,CADJ;AAEP+B,MAAAA,KAFO;AAGPyB,MAAAA;AAHO,KAAT;AAKA,WAAON,GAAP;AACD,GATI,EASF,EATE,CAAP;AAUD,CApCM;;;;AAsCA,SAASvB,QAAT,CACL+B,OAAwB,GAAG,EADtB,EAEL;AAAE9B,EAAAA,IAAI,GAAG,CAAT;AAAYC,EAAAA;AAAZ,CAFK,EAGwB;AAC7B,MAAI6B,OAAO,KAAK,IAAhB,EAAsB;AACpBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAMC,KAAK,GAAGD,OAAO,CAACE,MAAtB;AACA,QAAMC,KAAK,GAAGH,OAAO,CAACI,KAAR,CAAclC,IAAd,EAAoBC,KAAK,IAAID,IAAI,GAAGC,KAApC,CAAd;AAEA,QAAMkC,SAAS,GAAGlC,KAAK,GACnBmC,IAAI,CAACC,IAAL,CAAUrC,IAAI,GAAGC,KAAjB,IAA0BmC,IAAI,CAACC,IAAL,CAAU,CAACN,KAAK,GAAG/B,IAAT,IAAiBC,KAA3B,CADP,GAEnBD,IAAI,GACJ,CADI,GAEJ,CAJJ;AAKA,QAAMsC,WAAW,GAAGrC,KAAK,GAAGmC,IAAI,CAACC,IAAL,CAAUrC,IAAI,GAAGC,KAAjB,IAA0B,CAA7B,GAAiCD,IAAI,GAAG,CAAH,GAAO,CAArE;AACA,QAAMuC,eAAe,GAAGD,WAAW,GAAG,CAAtC;AACA,QAAME,WAAW,GAAGxC,IAAI,IAAIC,KAAK,IAAIwC,GAAb,CAAJ,GAAwBV,KAA5C;AAEA,SAAO;AACLW,IAAAA,UAAU,EAAEX,KADP;AAEL3B,IAAAA,KAAK,EAAE6B,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,EAAUC,GAAV,KAAkB;AACjC,aAAO;AACLtC,QAAAA,IAAI,EAAEoC,IADD;AAELG,QAAAA,IAAI,EAAED,GAAG,CAACD,CAAC,GAAG,CAAL,CAFJ;AAGLG,QAAAA,QAAQ,EAAEF,GAAG,CAACD,CAAC,GAAG,CAAL;AAHR,OAAP;AAKD,KANM,CAFF;AASLI,IAAAA,KAAK,EAAEhB,KATF;AAULiB,IAAAA,QAAQ,EAAE;AACRZ,MAAAA,WADQ;AAERC,MAAAA,eAFQ;AAGRC,MAAAA,WAHQ;AAIRW,MAAAA,SAAS,EAAElB,KAAK,CAACD,MAJT;AAKRG,MAAAA,SALQ;AAMRiB,MAAAA,OAAO,EAAEnD,KAND;AAORyC,MAAAA,UAAU,EAAEX;AAPJ;AAVL,GAAP;AAoBD;;AAEM,SAASsB,IAAT,CACLC,OAKC,GAAG;AACFC,EAAAA,EAAE,EAAG;AADH,CANC,EASLC,WATK,EAc2B;AAChC;AACA;AAEA,SAAO,SAASC,YAAT,CACLhE,MADK,EAELrB,IAFK,EAGLC,OAHK,EAILC,IAJK,EAKiC;AACtC,UAAMoF,QAAQ,GAAGF,WAAW,CAACG,OAAZ,IAAuBtF,OAAO,CAACuF,oBAAhD;AACA,UAAMC,mBAAmB,GAAGH,QAAQ,CAACjE,MAAD,EAASrB,IAAT,EAAeC,OAAf,EAAwB,EAC1D,GAAGC,IADuD;AAE1D2C,MAAAA,IAAI,EAAEqC,OAAO,CAACrC,IAAR,IAAgB3C,IAAI,CAAC2C,IAF+B;AAG1D6C,MAAAA,QAAQ,EAAER,OAAO,CAACrC,IAAR,GAAeqC,OAAO,CAACQ,QAAvB,GAAkCxF,IAAI,CAACwF;AAHS,KAAxB,CAApC,CAFsC,CAQtC;;AACA,QAAI,QAAOD,mBAAP,aAAOA,mBAAP,uBAAOA,mBAAmB,CAAEE,IAA5B,MAAsC,UAA1C,EAAqD;AACnD,aAAOF,mBAAmB,CAACE,IAApB,CAAyBnC,UAAU,IACxCoC,iBAAiB,CAACpC,UAAD,EAAaxD,IAAb,EAAmBC,OAAnB,EAA4BC,IAA5B,CADZ,CAAP;AAGD;;AAED,WAAO0F,iBAAiB,CAACH,mBAAD,EAAsBzF,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,CAAxB;AACD,GArBD;;AAuBA,WAAS0F,iBAAT,CACEpC,UADF,EAEExD,IAFF,EAGEC,OAHF,EAIEC,IAJF,EAKwC;AACtC,QAAIsD,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,UAAMqC,UAAU,GAAG,8BAAgBX,OAAO,CAACxE,IAAR,IAAgBR,IAAI,CAAC2F,UAArC,CAAnB;AACA,UAAMnF,IAAI,GAAG,2BAAamF,UAAb,CAAb;;AAEA,QAAIX,OAAO,CAACC,EAAR,KAAgB,IAApB,EAAyB;AACvB,UAAI5C,KAAK,CAACC,OAAN,CAAcgB,UAAd,CAAJ,EAA+B;AAC7B,eAAOvD,OAAO,CAACK,SAAR,CAAkBwF,aAAlB,CACL;AAAEC,UAAAA,GAAG,EAAEvC,UAAP;AAAmB9C,UAAAA,IAAI,EAAEA;AAAzB,SADK,EAEL;AAAEI,UAAAA,IAAI,EAAEb,OAAO,CAACa;AAAhB,SAFK,CAAP;AAID,OALD,MAKO;AACL,eAAOb,OAAO,CAACK,SAAR,CAAkB0F,WAAlB,CACL;AAAEC,UAAAA,EAAE,EAAEzC,UAAN;AAAkB9C,UAAAA,IAAI,EAAEA;AAAxB,SADK,EAEL;AAAEI,UAAAA,IAAI,EAAEb,OAAO,CAACa;AAAhB,SAFK,CAAP;AAID;AACF,KApBqC,CAsBtC;;;AACA,QAAIyB,KAAK,CAACC,OAAN,CAAcgB,UAAd,KAA6BA,UAAU,CAACI,MAAX,KAAsB,CAAvD,EAA0D;AACxD,aAAOJ,UAAP;AACD;;AAED,UAAM0C,YAAY,GAAGlG,IAArB;AACAkG,IAAAA,YAAY,CAAChF,MAAb,GAAsBgE,OAAO,CAACC,EAAR,CAAWgB,KAAX,CAAkB,GAAlB,EAAsBC,WAAtB,CACpB,CAAClD,GAAD,EAA2BC,GAA3B,KAA2C;AACzC,YAAMkD,GAAG,GAAG,EAAZ;AACAA,MAAAA,GAAG,CAAClD,GAAD,CAAH,GAAWD,GAAX;AACA,aAAOmD,GAAP;AACD,KALmB,EAMpB9D,KAAK,CAACC,OAAN,CAAcgB,UAAd,IAA4B;AAAE8C,MAAAA,EAAE,EAAE9C;AAAN,KAA5B,GAAiD;AAAE+C,MAAAA,EAAE,EAAE/C;AAAN,KAN7B,CAAtB;AASA,UAAM/C,SAAS,GAAG,EAAEoF,UAAU,YAAYW,oBAAxB,CAAlB;;AAEA,QAAIvG,OAAO,CAACE,KAAZ,EAAmB;AACjBF,MAAAA,OAAO,CAACE,KAAR,CAAcC,aAAd;;AACA,UAAIK,SAAJ,EAAe;AACbR,QAAAA,OAAO,CAACE,KAAR,CAAcE,mBAAd;AACD;AACF;;AAED,UAAMoG,eAAe,GAAGxG,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CACtB;AACEC,MAAAA,KAAK,EAAE0F,YADT;AAEEzF,MAAAA,SAFF;AAGEC,MAAAA,IAHF;AAIEP,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAJjB;AAKEU,MAAAA,MAAM,EAAEZ,OAAO,CAACY;AALlB,KADsB,EAQtB;AAAEC,MAAAA,IAAI,EAAEb,OAAO,CAACa;AAAhB,KARsB,CAAxB,CA9CsC,CAyDtC;;AACA,QAAI,QAAO2F,eAAP,aAAOA,eAAP,uBAAOA,eAAe,CAAEd,IAAxB,MAAkC,UAAtC,EAAiD;AAC/C,aAAOc,eAAe,CAACd,IAAhB,CAAqBjE,MAAM,IAChCgF,uBAAuB,CAAClD,UAAD,EAAa9B,MAAb,EAAqBmE,UAArB,CADlB,CAAP;AAGD;;AAED,WAAOa,uBAAuB,CAAClD,UAAD,EAAaiD,eAAb,EAA8BZ,UAA9B,CAA9B;AACD;;AAED,WAASa,uBAAT,CACElD,UADF,EAEEmD,WAFF,EAGEd,UAHF,EAIoC;AAClC,QACEA,UAAU,YAAYW,oBAAtB,IACAjE,KAAK,CAACC,OAAN,CAAcgB,UAAd,CADA,IAEAjB,KAAK,CAACC,OAAN,CAAcmE,WAAd,CAHF,EAIE;AACA,aAAOnD,UAAU,CAACe,GAAX,CAAelC,KAAK,IACzBsE,WAAW,CAACC,IAAZ,CAAiBP,GAAG,IAAI,4BAAWA,GAAX,EAAgBnB,OAAO,CAACC,EAAxB,MAAgC9C,KAAxD,CADK,CAAP;AAGD,KARD,MAQO;AACL,aAAOsE,WAAP;AACD;AACF;AACF;;AAEM,SAASE,UAAT,CACL3B,OAGC,GAAG,EAJC,EAKLE,WALK,EAM2B;AAChC,SAAO,eAAe0B,kBAAf,CACLzF,MADK,EAELrB,IAFK,EAGLC,OAHK,EAILC,IAJK,EAK4C;AACjD,UAAMoF,QAAQ,GAAGF,WAAW,CAACG,OAAZ,IAAuBtF,OAAO,CAACuF,oBAAhD;AACA,UAAMhC,UAA+B,GAAG,MAAM8B,QAAQ,CACpDjE,MADoD,EAEpDrB,IAFoD,EAGpDC,OAHoD,EAIpD,EACE,GAAGC,IADL;AAEE2C,MAAAA,IAAI,EAAEqC,OAAO,CAACrC,IAAR,IAAgB3C,IAAI,CAAC2C,IAF7B;AAGE6C,MAAAA,QAAQ,EAAER,OAAO,CAACrC,IAAR,GAAeqC,OAAO,CAACQ,QAAvB,GAAkCxF,IAAI,CAACwF;AAHnD,KAJoD,CAAtD;;AAWA,QAAIlC,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAO,IAAP;AACD,KAfgD,CAiBjD;AACA;;;AACA,UAAMuD,cAAc,GAAG9G,OAAO,CAACK,SAAR,CAAkB0G,oBAAlB,CACrB3F,MADqB,EAErBe,IAAI,IAAIA,IAAI,CAAC6E,QAAL,IAAiB7E,IAAI,CAAC6E,QAAL,CAAcvG,IAAd,KAAwB,MAF5B,CAAvB;;AAKA,mBAAewG,gBAAf,CACEC,QADF,EAE8B;AAC5B,YAAMzC,GAAsB,GAAG,EAA/B;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0C,QAAQ,CAACvD,MAA7B,EAAqC,EAAEa,CAAvC,EAA0C;AACxCC,QAAAA,GAAG,CAACD,CAAD,CAAH,GAAS,OAAOlC,KAAK,CAACC,OAAN,CAAc2E,QAAQ,CAAC1C,CAAD,CAAtB,IACZyC,gBAAgB,CAACC,QAAQ,CAAC1C,CAAD,CAAT,CADJ,GAEZ2C,eAAe,CAACD,QAAQ,CAAC1C,CAAD,CAAT,CAFV,CAAT;AAGD;;AACD,aAAOC,GAAP;AACD;;AAED,aAAS0C,eAAT,CAAyBC,OAAzB,EAAgE;AAC9D,aAAOpH,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CAA2B;AAChCC,QAAAA,KAAK,EAAE;AACLU,UAAAA,MAAM,EAAE;AACNoG,YAAAA,YAAY,EAAE;AACZf,cAAAA,EAAE,EAAE,4BAAUgB,cAAWhC,OAAX,CAAmBwB,cAAc,CAACS,GAAlC,EAAuCH,OAAvC,CAAV;AADQ;AADR;AADH,SADyB;AAQhC5G,QAAAA,SAAS,EAAE,IARqB;AAShCC,QAAAA,IAAI,EAAG;AATyB,OAA3B,CAAP;AAWD;;AAED,QAAI6B,KAAK,CAACC,OAAN,CAAcgB,UAAd,CAAJ,EAA+B;AAC7B,aAAO0D,gBAAgB,CAAC1D,UAAD,CAAvB;AACD,KAFD,MAEO;AACL,aAAO4D,eAAe,CAAC5D,UAAD,CAAtB;AACD;AACF,GA5DD;AA6DD;;AAED,SAASjC,iBAAT,CACErB,IADF,EAEEuH,SAFF,EAGiB;AACf,QAAMC,YAAY,GAAGxH,IAAI,CAACyH,UAAL,CAAgB,CAAhB,EAAmBD,YAAxC;;AACA,MAAIA,YAAJ,EAAkB;AAChB,UAAMC,UAAU,GAAGC,gCAAgC,CACjDF,YADiD,EAEjDD,SAFiD,EAGjDvH,IAHiD,CAAnD;AAMA,UAAM2F,UAAU,GAAG,8BAAgB3F,IAAI,CAAC2F,UAArB,CAAnB;;AAEA,QAAI,2BAAaA,UAAb,KAA4B,8BAAgBA,UAAhB,CAAhC,EAA6D;AAAA;;AAC3D,YAAM9D,KAAK,GAAG8D,UAAU,CAACgC,SAAX,GAAuBJ,SAAvB,CAAd;AACA,YAAMK,QAAQ,GAAG/F,KAAH,aAAGA,KAAH,sCAAGA,KAAK,CAAE/B,IAAV,gDAAG,YAAa4G,IAAb,CAAkBmB,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAc,OAAvC,CAAjB;;AACA,UAAIF,QAAJ,EAAc;AACZ,cAAMG,SAAS,GAAG,8BAAgBH,QAAQ,CAACpH,IAAzB,CAAlB;;AAEA,YAAI,yBAAWuH,SAAX,CAAJ,EAA2B;AACzB,iBAAON,UAAU,CAAC1E,MAAX,CACL,CAACC,GAAD,EAAqBgF,SAArB,KAA8C;AAAA;;AAC5C,kBAAMJ,QAAQ,2BAAGI,SAAS,CAACC,SAAb,yDAAG,qBAAqBvB,IAArB,CACfmB,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS3F,KAAT,KAAoB,OADZ,CAAjB;;AAGA,gBAAI,CAAAyF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEzF,KAAV,CAAgB+F,IAAhB,MAAyBC,cAAKC,IAAlC,EAAwC;AACtC,oBAAMC,OAAO,GAAGT,QAAQ,CAACzF,KAAT,CAAeA,KAA/B;AACA,oBAAMmG,SAAS,GAAGP,SAAS,CAACQ,QAAV,CAAmBF,OAAnB,CAAlB;;AACA,kBAAIC,SAAJ,EAAe;AACb,uBAAO,CAAC,GAAGtF,GAAJ,EAASsF,SAAS,CAACnG,KAAnB,CAAP;AACD;AACF;;AACD,mBAAOa,GAAP;AACD,WAbI,EAcL,EAdK,CAAP;AAgBD;AACF;AACF;AACF;;AAED,SAAO,EAAP;AACD;;AAED,SAAS0E,gCAAT,CACEF,YADF,EAEED,SAFF,EAGEvH,IAHF,EAIoB;AAClB,SAAOwH,YAAY,CAACgB,UAAb,CAAwBzF,MAAxB,CACL,CAACC,GAAD,EAAwByF,SAAxB,KAAqD;AACnD,QAAIA,SAAS,CAACP,IAAV,KAAmBC,cAAKO,eAA5B,EAA6C;AAC3C,YAAMC,WAAW,GAAG3I,IAAI,CAAC4I,SAAL,CAAeH,SAAS,CAACX,IAAV,CAAe3F,KAA9B,CAApB;;AACA,UAAIwG,WAAJ,EAAiB;AACf,eAAO,CACL,GAAG3F,GADE,EAEL,GAAG0E,gCAAgC,CACjCiB,WAAW,CAACnB,YADqB,EAEjCD,SAFiC,EAGjCvH,IAHiC,CAF9B,CAAP;AAQD;AACF,KAZD,MAYO,IAAIyI,SAAS,CAACP,IAAV,KAAmBC,cAAKU,eAA5B,EAA6C;AAClD,aAAO,CACL,GAAG7F,GADE,EAEL,GAAG0E,gCAAgC,CACjCe,SAAS,CAACjB,YADuB,EAEjCD,SAFiC,EAGjCvH,IAHiC,CAF9B,CAAP;AAQD;AAAC;AATK,SASiB;AACtB,YAAIyI,SAAS,CAACX,IAAV,CAAe3F,KAAf,KAAyBoF,SAA7B,EAAwC;AACtC,iBAAO,CAAC,GAAGvE,GAAJ,EAASyF,SAAT,CAAP;AACD;AACF;;AACD,WAAOzF,GAAP;AACD,GA7BI,EA8BL,EA9BK,CAAP;AAgCD;;AAEM,MAAMsC,oBAGZ,GAAG,SAASA,oBAAT,CAA8BnE,MAA9B,EAAsCrB,IAAtC,EAA4CC,OAA5C,EAAqDC,IAArD,EAA2D;AAC7D,MACG,OAAOmB,MAAP,IAAkB,QAAlB,IAA6BA,MAAM,KAAK,IAAzC,IACA,OAAOA,MAAP,KAAmB,UAFrB,EAGE;AACA,QAAInB,IAAI,CAAC2C,IAAT,EAAe;AACb,UAAI3C,IAAI,CAACwF,QAAT,EAAmB;AACjB,cAAMtD,IAAI,GAAGnC,OAAO,CAACK,SAAR,CAAkB0G,oBAAlB,CAAuC3F,MAAvC,CAAb;AACA,YAAI,CAACe,IAAL,EAAW,OAAO,IAAP;AACX,eAAO,4BAAWA,IAAX,EAAiBlC,IAAI,CAAC2C,IAAtB,CAAP;AACD;;AACD,aAAO,4BAAWxB,MAAX,EAAmBnB,IAAI,CAAC2C,IAAxB,CAAP;AACD;;AACD,UAAMmG,QAAQ,GAAG3H,MAAM,CAACnB,IAAI,CAACuH,SAAN,CAAvB;;AACA,QAAI,OAAOuB,QAAP,KAAqB,UAAzB,EAAoC;AAClC,aAAO3H,MAAM,CAACnB,IAAI,CAACuH,SAAN,CAAN,CAAuBzH,IAAvB,EAA6BC,OAA7B,EAAsCC,IAAtC,CAAP;AACD;;AACD,WAAO8I,QAAP;AACD;;AAED,SAAO,IAAP;AACD,CAxBM;;;AA0BP,IAAIC,sBAAsB,GAAG,KAA7B;;AACA,SAASC,4BAAT,CAAsCC,UAAtC,EAA0DrI,IAA1D,EAA+E;AAC7E,QAAMsI,YAAY,GAAGtI,IAAI,GAAI,GAAE,wBAAYA,IAAZ,CAAkB,GAAxB,GAA8B,EAAvD;AACA,SAAQ,oBAAmBsI,YAAa,uBAAsBD,UAAW;AAC3E;AACA;AACA;AACA;AACA;AACA,CANE;AAOD;;AAEM,SAASE,gBAAT,CACL/D,QADK,EAE2B;AAChC;AACA;AACA;AAEA,SAAO,SAASgE,sBAAT,CACLC,MADK,EAELvJ,IAFK,EAGLC,OAHK,EAILC,IAJK,EAKS;AACd,QAAI,CAAC+I,sBAAL,EAA6B;AAC3B,UAAI,CAAC/I,IAAL,EAAW;AACTsJ,0BAASC,IAAT,CAAcP,4BAA4B,CAAE,MAAF,CAA1C;;AACAD,QAAAA,sBAAsB,GAAG,IAAzB;AACD,OAHD,MAGO,IAAI,CAAChJ,OAAL,EAAc;AACnBuJ,0BAASC,IAAT,CAAcP,4BAA4B,CAAE,SAAF,EAAYhJ,IAAI,CAACY,IAAjB,CAA1C;;AACAmI,QAAAA,sBAAsB,GAAG,IAAzB;AACD;AACF;;AAED,QAAIS,QAAJ;;AACA,QAAIzJ,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEY,MAAb,EAAqB;AACnB6I,MAAAA,QAAQ,GAAGzJ,OAAO,CAACY,MAAR,CAAe8I,sBAAf,CACTzJ,IAAI,CAACY,IADI,EAER,GAAEZ,IAAI,CAAC0J,UAAL,CAAgB5B,IAAK,IAAG9H,IAAI,CAACuH,SAAU,EAFjC,CAAX;AAIAiC,MAAAA,QAAQ,CAACG,KAAT;AACD;;AACD,UAAMnI,MAAM,GAAG4D,QAAQ,CAACiE,MAAD,EAASvJ,IAAT,EAAeC,OAAf,EAAwBC,IAAxB,CAAvB;;AAEA,QAAI,CAACwJ,QAAL,EAAe;AACb,aAAOhI,MAAP;AACD;;AAED,UAAMoI,WAAW,GAAG,MAAY;AAC9B,UAAIJ,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACK,GAAT;AACD;AACF,KAJD;;AAKA,QAAI,QAAOrI,MAAP,aAAOA,MAAP,uBAAOA,MAAM,CAAEiE,IAAf,MAAyB,UAA7B,EAAwC;AACtCjE,MAAAA,MAAM,CAACiE,IAAP,CAAYmE,WAAZ,EAAyBA,WAAzB;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW;AACZ;;AACD,WAAOpI,MAAP;AACD,GAzCD;AA0CD;;AAEM,MAAMsI,eAAe,GAAGX,gBAAgB,CAAC7D,oBAAD,CAAxC","sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\nexport function findMany<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findManyResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n\n    return context.nodeModel.runQuery(\n      {\n        query: args,\n        firstOnly: false,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n  }\n}\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.runQuery(\n      {\n        query: { filter: args },\n        firstOnly: true,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number }\n\nexport function findManyPaginated<TSource, TArgs, TNodeType>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<TNodeType>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const extendedArgs = {\n      ...args,\n      group: group || [],\n      distinct: distinct || [],\n    }\n\n    const result = await findMany<TSource, PaginatedArgs<TArgs>>(typeName)(\n      source,\n      extendedArgs,\n      context,\n      info\n    )\n    return paginate(result, { skip: args.skip, limit: args.limit })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string\n}\n\nexport const distinct: GatsbyResolver<\n  IGatsbyConnection<any>,\n  IFieldConnectionArgs\n> = function distinctResolver(source, args): Array<string> {\n  const { field } = args\n  const { edges } = source\n\n  const values = new Set<string>()\n  edges.forEach(({ node }) => {\n    const value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    if (value === null || value === undefined) {\n      return\n    }\n    if (Array.isArray(value)) {\n      value.forEach(subValue =>\n        values.add(subValue instanceof Date ? subValue.toISOString() : subValue)\n      )\n    } else if (value instanceof Date) {\n      values.add(value.toISOString())\n    } else {\n      values.add(value)\n    }\n  })\n  return Array.from(values).sort()\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport const group: GatsbyResolver<\n  IGatsbyConnection<any>,\n  PaginatedArgs<IFieldConnectionArgs>\n> = function groupResolver(source, args): IGatsbyGroupReturnValue<any> {\n  const { field } = args\n  const { edges } = source\n  const groupedResults: Record<string, Array<string>> = edges.reduce(\n    (acc, { node }) => {\n      const value =\n        getValueAt(node, `__gatsby_resolved.${field}`) ||\n        getValueAt(node, field)\n      const values = Array.isArray(value) ? value : [value]\n      values\n        .filter(value => value != null)\n        .forEach(value => {\n          const key = value instanceof Date ? value.toISOString() : value\n          acc[key] = (acc[key] || []).concat(node)\n        })\n      return acc\n      // Note: using Object.create on purpose:\n      //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n      //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n    },\n    Object.create(null)\n  )\n\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc: IGatsbyGroupReturnValue<any>, fieldValue: string) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nexport function paginate<NodeType>(\n  results: Array<NodeType> = [],\n  { skip = 0, limit }: { skip?: number; limit?: number }\n): IGatsbyConnection<NodeType> {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const pageCount = limit\n    ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n    : skip\n    ? 2\n    : 1\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = skip + (limit || NaN) < count\n\n  return {\n    totalCount: count,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount: count,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: string\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, type: type },\n          { path: context.path }\n        )\n      } else {\n        return context.nodeModel.getNodeById(\n          { id: fieldValue, type: type },\n          { path: context.path }\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    const resultOrPromise = context.nodeModel.runQuery(\n      {\n        query: runQueryArgs,\n        firstOnly,\n        type,\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof resultOrPromise?.then === `function`) {\n      return resultOrPromise.then(result =>\n        linkResolverQueryResult(fieldValue, result, returnType)\n      )\n    }\n\n    return linkResolverQueryResult(fieldValue, resultOrPromise, returnType)\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(obj => getValueAt(obj, options.by) === value)\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: string\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.runQuery({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        firstOnly: true,\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldEnum = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldEnum)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (fieldArg?.value.kind === Kind.ENUM) {\n                const enumKey = fieldArg.value.value\n                const enumValue = fieldEnum.getValue(enumKey)\n                if (enumValue) {\n                  return [...acc, enumValue.value]\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<\n  any,\n  any\n> = function defaultFieldResolver(source, args, context, info) {\n  if (\n    (typeof source == `object` && source !== null) ||\n    typeof source === `function`\n  ) {\n    if (info.from) {\n      if (info.fromNode) {\n        const node = context.nodeModel.findRootNodeAncestor(source)\n        if (!node) return null\n        return getValueAt(node, info.from)\n      }\n      return getValueAt(source, info.from)\n    }\n    const property = source[info.fieldName]\n    if (typeof property === `function`) {\n      return source[info.fieldName](args, context, info)\n    }\n    return property\n  }\n\n  return null\n}\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  return function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    const result = resolver(parent, args, context, info)\n\n    if (!activity) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"file":"resolvers.js"}