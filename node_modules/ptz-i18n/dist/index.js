'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redirectToHome = exports.nPaths = exports.getUrlForLang = exports.getSlugAndLang = exports.getLangs = exports.getI18nBase = exports.getValidLangKey = exports.getUserLangKey = exports.getPagesPaths = exports.getCurrentLangKey = exports.getBrowserLanguage = exports.isInPagesPaths = exports.isHomePage = exports.addLangKeyToSlug = undefined;

var _startsWith = require('ramda/src/startsWith');

var _startsWith2 = _interopRequireDefault(_startsWith);

var _curry = require('ramda/src/curry');

var _curry2 = _interopRequireDefault(_curry);

var _getCurrentLangKey = require('./getCurrentLangKey');

var _getCurrentLangKey2 = _interopRequireDefault(_getCurrentLangKey);

var _getValidLangKey = require('./getValidLangKey');

var _getValidLangKey2 = _interopRequireDefault(_getValidLangKey);

var _getBrowserLanguage = require('./getBrowserLanguage');

var _getBrowserLanguage2 = _interopRequireDefault(_getBrowserLanguage);

var _redirectToHome = require('./redirectToHome');

var _redirectToHome2 = _interopRequireDefault(_redirectToHome);

var _getUserLangKey = require('./getUserLangKey');

var _getUserLangKey2 = _interopRequireDefault(_getUserLangKey);

var _getSlugAndLang = require('./getSlugAndLang');

var _getSlugAndLang2 = _interopRequireDefault(_getSlugAndLang);

var _getPagesPaths = require('./getPagesPaths');

var _getPagesPaths2 = _interopRequireDefault(_getPagesPaths);

var _isInPagesPaths = require('./isInPagesPaths');

var _isInPagesPaths2 = _interopRequireDefault(_isInPagesPaths);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets the number of paths in a url
 * @param {*} url pathName
 * @returns {Number} number of paths
 */
var nPaths = function nPaths(url) {
  return (url.match(/\//g) || []).length - 1;
};

/**
 * Checks if the url is /, /en/ or /pt/
 * @param {*} url this.props.location
 * @returns {Boolean} is home or not
 */
var isHomePage = function isHomePage(url) {
  return nPaths(url) <= 1;
};

/**
 * Add lang to slug
 * @param {String} slug  Slug to add lang
 * @param {String} langKey langKey to add
 * @param {{langKeyDefault: string, prefixDefault: boolean }} options prefixDefault: boolean indicating whether the the urls for the default land should be prefix or not
 * @returns {String} new slug
 */
var addLangKeyToSlug = (0, _curry2.default)(function (slug, langKey, options) {
  return langKey !== options.langKeyDefault || options.prefixDefault ? '/' + langKey + slug : '' + slug;
});

/**
 * Get url to the language
 * @param {String} homeLink  link for the home page
 * @param {String} url  browser url
 * @param {String} langKey default browser language key
 * @returns {String} new url
 */
var getUrlForLang = (0, _curry2.default)(function (homeLink, url, langKey) {
  return url === '/' || !(0, _startsWith2.default)(homeLink, url) ? '/' + langKey + '/' : url.replace(homeLink, '/' + langKey + '/');
});

/**
 * Get langs to create Menu
 * @param {[String]} langs lang keys ['en', 'fr', 'pt']
 * @param {String} currentLangKey current Lang Key
 * @param {func} getUrlForLang getUrlForLang curried, waiting for langKey
 * @returns {Array} langs menu data
 */
var getLangs = (0, _curry2.default)(function (langs, currentLangKey, getUrlForLang) {
  return langs.map(function (langKey) {
    return {
      langKey: langKey,
      selected: currentLangKey === langKey,
      link: getUrlForLang(langKey)
    };
  });
});

/**
 * Get i18n obj for the given langKey or first when not found
 * @param {*} i18n Translations object
 * @param {*} langKey langKey
 * @returns {*} i18n[langKey] or i18n[defaultLangKey]
 */
var getI18nBase = (0, _curry2.default)(function (i18n, langKey) {
  return i18n[langKey] || Object.values(i18n)[0];
});

exports.addLangKeyToSlug = addLangKeyToSlug;
exports.isHomePage = isHomePage;
exports.isInPagesPaths = _isInPagesPaths2.default;
exports.getBrowserLanguage = _getBrowserLanguage2.default;
exports.getCurrentLangKey = _getCurrentLangKey2.default;
exports.getPagesPaths = _getPagesPaths2.default;
exports.getUserLangKey = _getUserLangKey2.default;
exports.getValidLangKey = _getValidLangKey2.default;
exports.getI18nBase = getI18nBase;
exports.getLangs = getLangs;
exports.getSlugAndLang = _getSlugAndLang2.default;
exports.getUrlForLang = getUrlForLang;
exports.nPaths = nPaths;
exports.redirectToHome = _redirectToHome2.default;